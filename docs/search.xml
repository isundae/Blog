<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>程序设计的 SOLID 原则</title>
      <link href="/typescript/SOLID/"/>
      <url>/typescript/SOLID/</url>
      
        <content type="html"><![CDATA[<h1 id="程序设计的-SOLID-原则🎯"><a href="#程序设计的-SOLID-原则🎯" class="headerlink" title="程序设计的 SOLID 原则🎯"></a>程序设计的 SOLID 原则🎯</h1><p>SOLID 原则其实是用来指导软件设计的，它一共分为五条设计原则，分别是：</p><ol><li>单一职责原则（SRP）</li><li>开闭原则（OCP）</li><li>里氏替换原则（LSP）</li><li>接口隔离原则（ISP）</li><li>依赖倒置原则（DIP）</li></ol><h2 id="单一职责原则（SRP）🎯"><a href="#单一职责原则（SRP）🎯" class="headerlink" title="单一职责原则（SRP）🎯"></a>单一职责原则（SRP）🎯</h2><blockquote><p>核心思想：类的职责应该单一，不要承担过多的职责。</p></blockquote><p>    </p><p>    先看下面这段代码，为 Book 创建了一个类，但是类中却承担了多个职责，比如把书保存为一个文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">author</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">pages</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructor and other methods</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">saveToFile</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some fs.write method to save book to file</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    遵循单一职责原则，应该创建两个类，分别负责不同的事情：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">author</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">pages</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructor and other methods</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Persistence</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">saveToFile</span>(<span class="attr">book</span>: <span class="title class_">Book</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some fs.write method to save book to file</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>好处：降低类的复杂度、提高可读性、可维护性、扩展性、最大限度的减少潜在的副作用。</p></blockquote><h2 id="开闭原则（OCP）🎯"><a href="#开闭原则（OCP）🎯" class="headerlink" title="开闭原则（OCP）🎯"></a>开闭原则（OCP）🎯</h2><blockquote><p>核心思想：类应该对扩展开放，但对修改关闭。简单理解就是当别人要修改软件功能的时候，不能让他修改我们原有代码，尽量让他在原有的基础上做扩展。</p></blockquote><p>    </p><p>    下面这段写的不太好的代码，我们单独封装了一个 AreaCalculator 类来负责计算 Rectangle 和 Circle 类的面积。想象一下，如果我们后续要再添加一个形状，我们要创建一个新的类，同时我们也要去修改 AreaCalculator 来计算新类的面积，这违反了开闭原则。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">radius: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaCalculator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">calculateRectangleArea</span>(<span class="attr">rectangle</span>: <span class="title class_">Rectangle</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rectangle.<span class="property">width</span> * rectangle.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">calculateCircleArea</span>(<span class="attr">circle</span>: <span class="title class_">Circle</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * (circle.<span class="property">radius</span> * circle.<span class="property">radius</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    为了遵循开闭原则，我们只需要添加一个名为 Shape 的接口，每个形状类（矩形、圆形等）都可以通过实现它来依赖该接口。通过这种方式，可以将 AreaCalculator 类简化为一个带有参数的函数，每当创建一个新的形状类，都必须实现这个函数，这样就不需要修改原有的类了：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">calculateArea</span>(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">calculateArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">radius: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">calculateArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * (<span class="variable language_">this</span>.<span class="property">radius</span> * <span class="variable language_">this</span>.<span class="property">radius</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaCalculator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">calculateArea</span>(<span class="attr">shape</span>: <span class="title class_">Shape</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shape.<span class="title function_">calculateArea</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="里氏替换原则（LSP）🎯"><a href="#里氏替换原则（LSP）🎯" class="headerlink" title="里氏替换原则（LSP）🎯"></a>里氏替换原则（LSP）🎯</h2><blockquote><p>核心思想：在使用基类的的地方可以任意使用其子类，能保证子类完美替换基类。简单理解就是所有父类能出现的地方，子类就可以出现，并且替换了也不会出现任何错误。</p></blockquote><p>    要求子类的所有相同方法，都必须遵循父类的约定，否则当父类替换为子类时就会出错。</p><p>    先来看看下面这段代码，Square 类扩展了 Rectangle 类。但是这个扩展没有任何意义，因为通过覆盖宽度和高度属性来改变了原有的逻辑。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">calculateArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rectangle</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">_width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">_height</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(width, height);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    遵循里氏替换原则，不需要覆盖基类的属性，而是直接删除掉 Square 类并，将它的逻辑带到 Rectangle 类，而且也不改变其用途。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">calculateArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">isSquare</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> === <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    好处：增强程序的健壮性，即使增加了子类，原有的子类还可以继续运行。</p><h2 id="接口隔离原则（ISP）🎯"><a href="#接口隔离原则（ISP）🎯" class="headerlink" title="接口隔离原则（ISP）🎯"></a>接口隔离原则（ISP）🎯</h2><blockquote><p>核心思想：类间的依赖关系应该建立在最小的接口上。简单理解就是接口的内容一定要尽可能地小，能有多小就多小。我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p></blockquote><p>    看下面的代码，有一个名为 Troll 的类，它实现了一个名为 Character 的接口，但是 Troll 既不会游泳也不会说话，所以它似乎不太适合实现我们的接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">  <span class="title function_">shoot</span>(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">swim</span>(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">talk</span>(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">dance</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Troll</span> <span class="keyword">implements</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">shoot</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">swim</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// a troll can&#x27;t swim</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">talk</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// a troll can&#x27;t talk</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">dance</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    遵循接口隔离原则，删除 Character 接口并将它的功能拆分为四个接口，然后 Troll 类只需要依赖于我们实际需要的这些接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Talker</span> &#123;</span><br><span class="line">  <span class="title function_">talk</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Shooter</span> &#123;</span><br><span class="line">  <span class="title function_">shoot</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Swimmer</span> &#123;</span><br><span class="line">  <span class="title function_">swim</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dancer</span> &#123;</span><br><span class="line">  <span class="title function_">dance</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Troll</span> <span class="keyword">implements</span> <span class="title class_">Shooter</span>, <span class="title class_">Dancer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">shoot</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">dance</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖倒置原则（DIP）🎯"><a href="#依赖倒置原则（DIP）🎯" class="headerlink" title="依赖倒置原则（DIP）🎯"></a>依赖倒置原则（DIP）🎯</h2><blockquote><p>核心思想：依赖一个抽象的服务接口，而不是去依赖一个具体的服务执行者，从依赖具体实现转向到依赖抽象接口，倒置过来。</p></blockquote><p>    看看下面这段代码，有一个 SoftwareProject 类，它初始化了 FrontendDeveloper 和 BackendDeveloper 类：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FrontendDeveloper</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">writeHtmlCode</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BackendDeveloper</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">writeTypeScriptCode</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SoftwareProject</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">frontendDeveloper</span>: <span class="title class_">FrontendDeveloper</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">backendDeveloper</span>: <span class="title class_">BackendDeveloper</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">frontendDeveloper</span> = <span class="keyword">new</span> <span class="title class_">FrontendDeveloper</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">backendDeveloper</span> = <span class="keyword">new</span> <span class="title class_">BackendDeveloper</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">createProject</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">frontendDeveloper</span>.<span class="title function_">writeHtmlCode</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">backendDeveloper</span>.<span class="title function_">writeTypeScriptCode</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    遵循依赖倒置原则，创建一个 Developer 接口，由于 FrontendDeveloper 和 BackendDeveloper 是相似的类，它们都依赖于 Developer 接口。</p><p>    不需要在 SoftwareProject 类中以单一方式初始化 FrontendDeveloper 和 BackendDeveloper，而是将它们作为一个列表来遍历它们，分别调用每个 develop() 方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Developer</span> &#123;</span><br><span class="line">  <span class="title function_">develop</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FrontendDeveloper</span> <span class="keyword">implements</span> <span class="title class_">Developer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">develop</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">writeHtmlCode</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">writeHtmlCode</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BackendDeveloper</span> <span class="keyword">implements</span> <span class="title class_">Developer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">develop</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">writeTypeScriptCode</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">writeTypeScriptCode</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SoftwareProject</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">developers</span>: <span class="title class_">Developer</span>[] = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">createProject</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">developers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">developer: Developer</span>) =&gt;</span> &#123;</span><br><span class="line">      developer.<span class="title function_">develop</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> softwareProject = <span class="keyword">new</span> <span class="title class_">SoftwareProject</span>()</span><br><span class="line">softwareProject.<span class="property">developers</span> = [<span class="keyword">new</span> <span class="title class_">FrontendDeveloper</span>(), <span class="keyword">new</span> <span class="title class_">BackendDeveloper</span>()]</span><br><span class="line">softwareProject.<span class="title function_">createProject</span>()</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Developer</span> &#123;</span><br><span class="line">  <span class="title function_">develop</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FrontendDeveloper</span> <span class="keyword">implements</span> <span class="title class_">Developer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">develop</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">writeHtmlCode</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">writeHtmlCode</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BackendDeveloper</span> <span class="keyword">implements</span> <span class="title class_">Developer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">develop</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">writeTypeScriptCode</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">writeTypeScriptCode</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SoftwareProject</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">developers</span>: <span class="title class_">Developer</span>[] = []</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">...developers: Developer[]</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">developers</span>.<span class="title function_">push</span>(...developers)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">createProject</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">developers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">developer: Developer</span>) =&gt;</span> &#123;</span><br><span class="line">      developer.<span class="title function_">develop</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> softwareProject = <span class="keyword">new</span> <span class="title class_">SoftwareProject</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">FrontendDeveloper</span>(),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">BackendDeveloper</span>()</span><br><span class="line">).<span class="title function_">createProject</span>()</span><br></pre></td></tr></table></figure><p>    好处：实现模块间的松耦合，更利于多模块并行开发。</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> SOLID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koa2框架原理及实现</title>
      <link href="/typescript/Koa/"/>
      <url>/typescript/Koa/</url>
      
        <content type="html"><![CDATA[<h1 id="Koa2框架原理及实现"><a href="#Koa2框架原理及实现" class="headerlink" title="Koa2框架原理及实现"></a>Koa2框架原理及实现</h1><p>    <a href="https://koa.bootcss.com/">Koa2</a>是一个基于Node实现的Web框架，特点是优雅、简洁、健壮、体积小、表现力强。它所有的功能通过插件的形式来实现。</p><p>    下面自己实现一个简单的Koa，通过这种方式来深入理解Koa原理，尤其是中间件部分的理解。Koa的具体实现可以看的<a href="https://github.com/koajs/koa">koa的源码</a>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// koa 的简单使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&#x27;koa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;hello koa&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running at Http://localhost<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>    启动应用，浏览器中打开 <a href="http://localhost:3000/">http://localhost:3000/</a></p><p>    通过上面的代码，如果要实现koa，需要实现三个模块，分别是http的封装，ctx对象的构建，中间件机制的实现，当然koa还实现了错误捕获和错误处理。</p><h2 id="封装http模块"><a href="#封装http模块" class="headerlink" title="封装http模块"></a>封装http模块</h2><p>    通过阅读Koa2的<a href="https://links.jianshu.com/go?to=https://github.com/koajs/koa">源码</a>可知Koa是通过封装原生的node http模块。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hello nodejs&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>    以上是使用Node.js创建一个HTTP服务的代码片段，关键是使用http模块中的createServer()方法，接下来对上面这面这部分过程进行一个封装。</p><p>    创建application.js，并创建一个Application类用于创建Koa实例。</p><p>    通过创建use()方法来注册中间件和回调函数。</p><p>    通过listen()方法开启服务监听实例，并传入use()方法注册的回调函数。</p><p>如下代码所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = callback</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    http</span><br><span class="line">      .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">callback</span>(req, res)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">listen</span>(...args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    接下来创建一个server.js，引入application.js进行测试</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MiniKoa</span> <span class="keyword">from</span> <span class="string">&#x27;./application.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">MiniKoa</span>()</span><br><span class="line">app</span><br><span class="line"> .<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"> res.<span class="title function_">end</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> .<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>    启动后，在浏览器中输入 <a href="http://localhost:3000/">http://localhost:3000/</a> 就能看到显示”hello world”。这样就完成http server的简单封装了。</p><h2 id="构造ctx对象"><a href="#构造ctx对象" class="headerlink" title="构造ctx对象"></a>构造ctx对象</h2><p>    Koa 的 Context 把 Node 的 Request 对象和 Response 对象封装到单个对象中，并且暴露给中间件等回调函数。比如获取 url，封装之前通过req.url的方式获取，封装之后只需要ctx.url就可以获取。因此需要达到以下效果：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx                             <span class="comment">// 这是 Context</span></span><br><span class="line">  ctx.<span class="property">request</span>             <span class="comment">// 这是 koa Request</span></span><br><span class="line">  ctx.<span class="property">response</span>             <span class="comment">// 这是 koa Response</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JavaScript-的-getter-和-setter"><a href="#JavaScript-的-getter-和-setter" class="headerlink" title="JavaScript 的 getter 和 setter"></a>JavaScript 的 getter 和 setter</h3><p>    在此之前，需要了解 setter 和 getter 属性，通过 setter 和 getter 属性，可以自定义属性的特性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;old name&#x27;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---修改name的值---&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                                            <span class="comment">// 输出：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)      <span class="comment">// old name</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;new name&#x27;</span>      <span class="comment">// ---修改name的值---</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)      <span class="comment">// new name</span></span><br></pre></td></tr></table></figure><h3 id="构造-context"><a href="#构造-context" class="headerlink" title="构造 context"></a>构造 context</h3><p>    使用 getter 和 setter 来构造 context:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.callback = () =&gt; &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 把 context、request 和 response 挂载到 Application 里面</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">request</span> = request</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">response</span> = response</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = callback</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改造 listen</span></span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// http</span></span><br><span class="line">    <span class="comment">//   .createServer((req, res) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     this.callback(req, res)</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line">    <span class="comment">//   .listen(...args)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能是一个 异步函数 因此需要 async</span></span><br><span class="line">    http</span><br><span class="line">      .<span class="title function_">createServer</span>(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="title function_">createCtx</span>(req, res)</span><br><span class="line">        <span class="comment">// 此时就可以直接给callback一个 ctx</span></span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">callback</span>(ctx)</span><br><span class="line">        ctx.<span class="property">res</span>.<span class="title function_">end</span>(ctx.<span class="property">body</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">listen</span>(...args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把原生的 req 和 res 挂载到 ctx 上</span></span><br><span class="line">  <span class="title function_">createCtx</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟 req 和 res</span></span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">context</span>) <span class="comment">// 生成 context 对象，里面挂载 body 和 url</span></span><br><span class="line">    ctx.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">request</span>) <span class="comment">// 把 request 挂载到 ctx 上</span></span><br><span class="line">    ctx.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">response</span>) <span class="comment">// 把 response 挂载到 ctx 上</span></span><br><span class="line">    <span class="comment">// 把原生的 req 和 res 都挂载到 request 和 response 以及 ctx 上</span></span><br><span class="line">    ctx.<span class="property">req</span> = ctx.<span class="property">request</span>.<span class="property">req</span> = req</span><br><span class="line">    ctx.<span class="property">res</span> = ctx.<span class="property">response</span>.<span class="property">res</span> = res</span><br><span class="line">    <span class="keyword">return</span> ctx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">url</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">req</span>.<span class="property">url</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> response = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">body</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_body</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">body</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_body</span> = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">url</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>.<span class="property">url</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">body</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">response</span>.<span class="property">body</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">body</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">response</span>.<span class="property">body</span> = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    这时，就可以通过 ctx 来获取 url 了:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MiniKoa</span> <span class="keyword">from</span> <span class="string">&#x27;./application.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">MiniKoa</span>()</span><br><span class="line"><span class="comment">// 此时可以使用 ctx</span></span><br><span class="line">app</span><br><span class="line"> .<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line"> ctx.<span class="property">body</span> = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"> &#125;)</span><br><span class="line"> .<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="Koa中间件及洋葱圈模型的理解与实现"><a href="#Koa中间件及洋葱圈模型的理解与实现" class="headerlink" title="Koa中间件及洋葱圈模型的理解与实现"></a>Koa中间件及洋葱圈模型的理解与实现</h2><p>    koa的中间件机制是一个洋葱圈模型，通过use()注册多个中间件放入数组中，然后从外层开始往内执行，遇到next()后进入下一个中间件，当所有中间件执行完后，开始返回，依次执行中间件中未执行的部分，如上图所示。</p><p>    在实现之前，先来了解一下中间件的原理，根据中间件的原理可知，要层层递进执行多个函数，比如下面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x, y</span>) =&gt; x + y</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params">z</span>) =&gt; z * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> res2 = <span class="title function_">double</span>(res1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2)         <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>    上面的例子中，把add()函数的结果传入double()中，把函数作为参数，这样最终就会先执行add()然后执行double()，下面把这种模式编写成一个通用的compose()函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x, y</span>) =&gt; x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params">z</span>) =&gt; z * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">middleware</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = middleware[<span class="number">0</span>](...args)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; middleware.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      res = middleware[i](res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">compose</span>([add, double])</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure><p>    上面的compose()函数还有一个缺点，它是一个同步的方法，并没有异步的等待，如果要使用异步，直接使用for循环是不行的，它不能等待异步执行完毕。</p><p>    koa 对外暴露了next()方法来实现异步等待，它是一个Promise，当执行到它时就执行下一个中间件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end fn1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">delay</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end fn2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn3&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(middleware)</span></span><br><span class="line">  <span class="comment">// [ [AsyncFunction: fn1], [AsyncFunction: fn2], [AsyncFunction: fn3] ]</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 先执行第一个函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="comment">// 如何不存在直接返回 Promise</span></span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="comment">// step1: 返回一个 Promise，因此单纯变成一个 Promise 且 立即执行</span></span><br><span class="line">      <span class="comment">// step2: 往当前中间件传入一个next()方法，当这个中间件有执行 next 的时候才执行下一个中间件</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(<span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// 执行下一个中间件</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">dispatch</span>(i + <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleware = [fn1, fn2, fn3]</span><br><span class="line"><span class="keyword">const</span> finalFn = <span class="title function_">compose</span>(middleware)</span><br><span class="line"><span class="title function_">finalFn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn1</span></span><br><span class="line"><span class="comment">// fn2</span></span><br><span class="line"><span class="comment">// 等待两秒</span></span><br><span class="line"><span class="comment">// fn3</span></span><br><span class="line"><span class="comment">// end fn2</span></span><br><span class="line"><span class="comment">// end fn1</span></span><br></pre></td></tr></table></figure><p>    上面已经实现一个了一个简单的中间件示例，接下来把它整合到 Application 类中：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.callback = () =&gt; &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 把 context、request 和 response 挂载到 Application 里面</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">request</span> = request</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">response</span> = response</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">middleware</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个 middleware 数组，通过 push 传入多个 callback</span></span><br><span class="line">    <span class="comment">// 然后通过 compose 控制整个 middleware 执行的顺序</span></span><br><span class="line">    <span class="comment">// 每个 callback 回调函数给两个参数 第一个是 context 第二个是 next</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">middleware</span>.<span class="title function_">push</span>(callback)</span><br><span class="line">    <span class="comment">// this.callback = callback</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 直接把 compose 移植过来</span></span><br><span class="line">  <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">    <span class="comment">// 每个中间件需要一个 context</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">        <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中间件第一个参数是一个 context，第二个参数是 next()</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(</span><br><span class="line">          <span class="title function_">fn</span>(context, <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">dispatch</span>(i + <span class="number">1</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改造 listen</span></span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// http</span></span><br><span class="line">    <span class="comment">//   .createServer((req, res) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     this.callback(req, res)</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line">    <span class="comment">//   .listen(...args)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能是一个 异步函数 因此需要 async</span></span><br><span class="line">    http</span><br><span class="line">      .<span class="title function_">createServer</span>(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="title function_">createCtx</span>(req, res)</span><br><span class="line">        <span class="comment">// await this.callback(ctx)</span></span><br><span class="line">        <span class="comment">// 这里不能直接执行 callback 而是先获取经过 compose 处理后的中间件集合</span></span><br><span class="line">        <span class="keyword">const</span> fn = <span class="variable language_">this</span>.<span class="title function_">compose</span>(<span class="variable language_">this</span>.<span class="property">middleware</span>)</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">fn</span>(ctx)</span><br><span class="line">        ctx.<span class="property">res</span>.<span class="title function_">end</span>(ctx.<span class="property">body</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">listen</span>(...args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">createCtx</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">context</span>)</span><br><span class="line">    ctx.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">request</span>)</span><br><span class="line">    ctx.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">    ctx.<span class="property">req</span> = ctx.<span class="property">request</span>.<span class="property">req</span> = req</span><br><span class="line">    ctx.<span class="property">res</span> = ctx.<span class="property">response</span>.<span class="property">res</span> = res</span><br><span class="line">    <span class="keyword">return</span> ctx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">url</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">req</span>.<span class="property">url</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> response = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">body</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_body</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">body</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_body</span> = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">url</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>.<span class="property">url</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">body</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">response</span>.<span class="property">body</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">body</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">response</span>.<span class="property">body</span> = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    测试它是否好用:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MiniKoa</span> <span class="keyword">from</span> <span class="string">&#x27;./application.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">MiniKoa</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;(fn1) &#x27;</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">    ctx.<span class="property">body</span> += <span class="string">&#x27;(end fn1) &#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> += <span class="string">&#x27;(fn2) &#x27;</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delay</span>()</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">    ctx.<span class="property">body</span> += <span class="string">&#x27;(end fn2) &#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> += <span class="string">&#x27;(fn3) &#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器输出：(fn1) (fn2) (fn3) (end fn2) (end fn1)</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>    到此为止，一个简单的 Koa 就实现了，但是这里还缺少了异常处理，更详细的实现方式请查看 Koa 源码，无非也只是一些工具函数以及一些功能点的细化，其基本原理大概就是如此了。其中的难点是中间件原理，通过这个例子彻底理解中间件原理后，以后再使用起这个框架来，就更加得心应手了。</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> koa </tag>
            
            <tag> 实现原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pokemon-api</title>
      <link href="/uncategorized/pokemon-api/"/>
      <url>/uncategorized/pokemon-api/</url>
      
        <content type="html"><![CDATA[<h1 id="宝可梦相关接口"><a href="#宝可梦相关接口" class="headerlink" title="宝可梦相关接口"></a>宝可梦相关接口</h1><h2 id="宝可梦列表接口"><a href="#宝可梦列表接口" class="headerlink" title="宝可梦列表接口"></a>宝可梦列表接口</h2><h3 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h3><p>GET <a href="https://pokemon.fantasticmao.cn/pokemon/list">https://pokemon.fantasticmao.cn/pokemon/list</a></p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th>字段名</th><th>类型</th><th>说明</th><th>示例</th><th>是否必填</th><th>默认值</th></tr></thead><tbody><tr><td>generation</td><td>int</td><td>第几世代</td><td>1</td><td>否</td><td>0：表示获取全部世代的宝可梦</td></tr><tr><td>eggGroup</td><td>String</td><td>蛋组名称</td><td>植物群</td><td>否</td><td>N&#x2F;A：蛋组不参与过滤条件</td></tr></tbody></table><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><table><thead><tr><th>字段名</th><th>类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>全国图鉴</td><td>1</td></tr><tr><td>nameZh</td><td>String</td><td>中文名称</td><td>妙蛙种子</td></tr><tr><td>nameJa</td><td>String</td><td>日文名称</td><td>フシギダネ</td></tr><tr><td>nameEn</td><td>String</td><td>英文名称</td><td>Bulbasaur</td></tr><tr><td>type1</td><td>String</td><td>属性 1</td><td>草</td></tr><tr><td>type2</td><td>String</td><td>属性 2</td><td>毒</td></tr><tr><td>ability1</td><td>String</td><td>特性 1</td><td>茂盛</td></tr><tr><td>ability2</td><td>String</td><td>特性 2</td><td></td></tr><tr><td>abilityHide</td><td>String</td><td>隐藏特性</td><td>叶绿素</td></tr><tr><td>generation</td><td>int</td><td>第几世代</td><td>1</td></tr></tbody></table><hr><h2 id="宝可梦详情接口"><a href="#宝可梦详情接口" class="headerlink" title="宝可梦详情接口"></a>宝可梦详情接口</h2><h3 id="接口地址-1"><a href="#接口地址-1" class="headerlink" title="接口地址"></a>接口地址</h3><p>GET <a href="https://pokemon.fantasticmao.cn/pokemon/detail">https://pokemon.fantasticmao.cn/pokemon/detail</a></p><h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th>字段名</th><th>类型</th><th>说明</th><th>示例</th><th>是否必填</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>全国图鉴编号</td><td>1</td><td>否</td></tr><tr><td>nameZh</td><td>String</td><td>中文名称，支持模糊查询，例如「妙蛙」</td><td>妙蛙种子</td><td>否</td></tr></tbody></table><h3 id="返回结果-1"><a href="#返回结果-1" class="headerlink" title="返回结果"></a>返回结果</h3><table><thead><tr><th>字段名</th><th>类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>全国图鉴</td><td>1</td></tr><tr><td>nameZh</td><td>String</td><td>中文名称</td><td>妙蛙种子</td></tr><tr><td>nameJa</td><td>String</td><td>日文名称</td><td>フシギダネ</td></tr><tr><td>nameEn</td><td>String</td><td>英文名称</td><td>Bulbasaur</td></tr><tr><td>type1</td><td>String</td><td>属性 1</td><td>草</td></tr><tr><td>type2</td><td>String</td><td>属性 2</td><td>毒</td></tr><tr><td>ability1</td><td>String</td><td>特性 1</td><td>茂盛</td></tr><tr><td>ability2</td><td>String</td><td>特性 2</td><td></td></tr><tr><td>abilityHide</td><td>String</td><td>隐藏特性</td><td>叶绿素</td></tr><tr><td>generation</td><td>int</td><td>第几世代</td><td>1</td></tr><tr><td>baseStat.hp</td><td>int</td><td>HP</td><td>45</td></tr><tr><td>baseStat.attack</td><td>int</td><td>攻击</td><td>49</td></tr><tr><td>baseStat.defense</td><td>int</td><td>防御</td><td>49</td></tr><tr><td>baseStat.spAttack</td><td>int</td><td>特攻</td><td>65</td></tr><tr><td>baseStat.spDefense</td><td>int</td><td>特防</td><td>65</td></tr><tr><td>baseStat.speed</td><td>int</td><td>速度</td><td>45</td></tr><tr><td>baseStat.total</td><td>int</td><td>总合</td><td>318</td></tr><tr><td>baseStat.average</td><td>int</td><td>平均值</td><td>53</td></tr><tr><td>detail.imgUrl</td><td>String</td><td>预览图片</td><td><a href="https://s1.52poke.wiki/wiki/thumb/2/21/001Bulbasaur.png/300px-001Bulbasaur.png">https://s1.52poke.wiki/wiki/thumb/2/21/001Bulbasaur.png/300px-001Bulbasaur.png</a></td></tr><tr><td>detail.category</td><td>String</td><td>分类</td><td>种子宝可梦</td></tr><tr><td>detail.height</td><td>String</td><td>身高</td><td>0.7m</td></tr><tr><td>detail.weight</td><td>String</td><td>体重</td><td>6.9kg</td></tr><tr><td>detail.bodyStyle</td><td>String</td><td>体型</td><td><a href="https://s1.52poke.wiki/wiki/c/cc/Body08.png">https://s1.52poke.wiki/wiki/c/cc/Body08.png</a></td></tr><tr><td>detail.catchRate</td><td>String</td><td>捕获率</td><td>5.9%</td></tr><tr><td>detail.genderRatio</td><td>String</td><td>性别比例，以逗号分隔</td><td>雄性 87.5%,雌性 12.5%</td></tr><tr><td>detail.eggGroup1</td><td>String</td><td>蛋组 1</td><td>怪兽</td></tr><tr><td>detail.eggGroup2</td><td>String</td><td>蛋组 2</td><td>植物群</td></tr><tr><td>detail.hatchTime</td><td>String</td><td>孵化时间</td><td>5140 步</td></tr><tr><td>detail.effortValue</td><td>String</td><td>基础点数，以逗号分隔</td><td>ＨＰ 0,攻击 0,防御 0,特攻 1,特防 0,速度 0</td></tr><tr><td>learnSetByLevelingUp.level1</td><td>String</td><td>等级（太阳&#x2F;月亮）</td><td>-</td></tr><tr><td>learnSetByLevelingUp.level2</td><td>String</td><td>等级（究极之日&#x2F;究极之月）</td><td>-</td></tr><tr><td>learnSetByLevelingUp.move</td><td>String</td><td>招式名称</td><td>撞击</td></tr><tr><td>learnSetByLevelingUp.type</td><td>String</td><td>属性</td><td>一般</td></tr><tr><td>learnSetByLevelingUp.category</td><td>String</td><td>分类</td><td>物理</td></tr><tr><td>learnSetByLevelingUp.power</td><td>String</td><td>威力</td><td>40</td></tr><tr><td>learnSetByLevelingUp.accuracy</td><td>String</td><td>命中</td><td>100</td></tr><tr><td>learnSetByLevelingUp.pp</td><td>String</td><td>PP</td><td>35</td></tr><tr><td>learnSetByTechnicalMachine.imgUrl</td><td>String</td><td>招式学习器图片链接</td><td><a href="https://s1.52poke.wiki/wiki/e/e3/Bag_TM_%E4%B8%80%E8%88%AC_Sprite.png">https://s1.52poke.wiki/wiki/e/e3/Bag_TM_%E4%B8%80%E8%88%AC_Sprite.png</a></td></tr><tr><td>learnSetByTechnicalMachine.technicalMachine</td><td>String</td><td>招式学习器名称</td><td>招式学习器０１</td></tr><tr><td>learnSetByTechnicalMachine.move</td><td>String</td><td>招式名称</td><td>叫声</td></tr><tr><td>learnSetByTechnicalMachine.type</td><td>String</td><td>属性</td><td>一般</td></tr><tr><td>learnSetByTechnicalMachine.category</td><td>String</td><td>分类</td><td>变化</td></tr><tr><td>learnSetByTechnicalMachine.power</td><td>String</td><td>威力</td><td>-</td></tr><tr><td>learnSetByTechnicalMachine.accuracy</td><td>String</td><td>命中</td><td>100</td></tr><tr><td>learnSetByTechnicalMachine.pp</td><td>String</td><td>PP</td><td>40</td></tr><tr><td>learnSetByBreeding.parent</td><td>String</td><td>亲代</td><td>呆呆兽,呆壳兽,卡比兽</td></tr><tr><td>learnSetByBreeding.move</td><td>String</td><td>招式名称</td><td>瞬间失忆</td></tr><tr><td>learnSetByBreeding.type</td><td>String</td><td>属性</td><td>超能力</td></tr><tr><td>learnSetByBreeding.category</td><td>String</td><td>分类</td><td>变化</td></tr><tr><td>learnSetByBreeding.power</td><td>String</td><td>威力</td><td>-</td></tr><tr><td>learnSetByBreeding.accuracy</td><td>String</td><td>命中</td><td>-</td></tr><tr><td>learnSetByBreeding.pp</td><td>String</td><td>PP</td><td>20</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodemon</title>
      <link href="/uncategorized/nodemon/"/>
      <url>/uncategorized/nodemon/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.isundae.cn/blog/202207180929280.png"></p><p>    Swap <a href="https://nodemon.io/">nodemon</a> instead of <strong>node</strong> to run your code, and now your process will automatically restart when your code changes. To install, get <a href="https://nodejs.org/">Node.js</a>, then from your terminal run:</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>npm install -g nodemon</code></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>有两种配置方式</p><h2 id="1-创建nodemon-json"><a href="#1-创建nodemon-json" class="headerlink" title="1. 创建nodemon.json"></a>1. 创建nodemon.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;verbose&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*.test.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;fixtures/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;execMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;rb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ruby&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;pde&quot;</span><span class="punctuation">:</span> <span class="string">&quot;processing --sketch=&#123;&#123;pwd&#125;&#125; --run&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-在package-json中"><a href="#2-在package-json中" class="headerlink" title="2. 在package.json中"></a>2. 在package.json中</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://nodemon.io&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;...&quot;</span><span class="punctuation">:</span> <span class="string">&quot;... other standard package.json values&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;nodemonConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;test/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;docs/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2500&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><code>nodemon [your app.js]</code></p><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><h2 id="h或-help"><a href="#h或-help" class="headerlink" title="-h或-help:"></a>-h或-help:</h2><p>查看帮助菜单</p><p><code>nodemon -h</code></p><h2 id="–exec"><a href="#–exec" class="headerlink" title="–exec"></a>–exec</h2><p>运行非js程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● nodemon --<span class="built_in">exec</span> ts-node src/index.ts </span><br><span class="line">// 通过ts-node运行src目录下的index.ts</span><br><span class="line"></span><br><span class="line">● nodemon --<span class="built_in">exec</span> <span class="string">&quot;python -v&quot;</span> ./app.py </span><br><span class="line">// 通过verbose模式的python运行app.py</span><br></pre></td></tr></table></figure><p>如果编译的时候带参数，则需要加””但如果没有参数则不需要””</p><h2 id="–ignore"><a href="#–ignore" class="headerlink" title="–ignore"></a>–ignore</h2><p>热更新时忽略某些文件&#x2F;目录&#x2F;文件模式</p><p><code>nodemon --ignore lib/     忽略lib内部文件更改</code></p><h2 id="–watch"><a href="#–watch" class="headerlink" title="–watch"></a>–watch</h2><p>热更新时监视更多的文件，若这些被监视的文件更新，则项目也会进行热更新</p><p><code>nodemon --watch index.js --watch ./dist/ceshi.js</code></p><p>一般用于不构成依赖关系，但想要监视的文件。</p><h2 id="e"><a href="#e" class="headerlink" title="-e"></a>-e</h2><p>可以使用-e（或–ext）开关指定自己的列表</p><p>默认情况下，nodemon查找与文件.js，.mjs，.coffee，.litcoffee，和.json扩展。</p><p><code>nodemon -e js，pug   // 现在pug文件更新时，也会导致项目热更新了</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodemon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello-Hexo</title>
      <link href="/hexo/hello-hexo/"/>
      <url>/hexo/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.isundae.cn/blog/202207151615934.png"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
